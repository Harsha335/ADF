{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-practice02"
		},
		"LS_AzureSqlDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_AzureSqlDatabase'"
		},
		"LS_st_assessment1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_st_assessment1'"
		},
		"LS_AzureSqlDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "practice-server001.database.windows.net"
		},
		"LS_AzureSqlDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DB_misumi"
		},
		"LS_AzureSqlDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Harsha335"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_blobToDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from blob to sql DB",
						"description": "Copy data from blob to sql DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_st_assessment1_misumi",
								"type": "DatasetReference",
								"parameters": {
									"blobTableName": {
										"value": "@pipeline().parameters.blobTableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.tableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"blobTableName": {
						"type": "String"
					},
					"schemaName": {
						"type": "String"
					},
					"tableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-29T19:09:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_st_assessment1_misumi')]",
				"[concat(variables('factoryId'), '/datasets/DS_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_prepToReporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow generate Avgs",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_reporting",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProductDetails": {
										"schemaName": "prep",
										"tableName": "productDetails"
									},
									"sinkToReportingProductDetails": {
										"schemaName": "reporting",
										"tableName": "avgProductDetails"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_reporting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_rawToprep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DL_RawToPrep",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_rawToprep",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoryDetails": {
										"schemaName": "raw",
										"tableName": "categoryDetails"
									},
									"sourceProductDetails": {
										"schemaName": "raw",
										"tableName": "productDetails"
									},
									"sinkToPrepCategoryDetails": {
										"schemaName": "prep",
										"tableName": "categoryDetails"
									},
									"sinkToPrepProductDetails": {
										"schemaName": "raw",
										"tableName": "productDetails"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-29T19:09:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_rawToprep')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_st_assessment1_misumi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_st_assessment1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().blobTableName",
							"type": "Expression"
						},
						"container": "misumi-input-container"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Category Label",
						"type": "String"
					},
					{
						"name": "Subcategory Label",
						"type": "String"
					},
					{
						"name": "Product Label",
						"type": "String"
					},
					{
						"name": "Product ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_st_assessment1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_AzureSqlDatabase_properties_typeProperties_server')]",
					"database": "[parameters('LS_AzureSqlDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_AzureSqlDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_AzureSqlDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_st_assessment1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_st_assessment1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_rawToprep')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sourceCategoryDetails"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sourceProductDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sinkToPrepCategoryDetails"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sinkToPrepProductDetails"
						}
					],
					"transformations": [
						{
							"name": "removeDuplicateRecords"
						},
						{
							"name": "removeHashCodeCol",
							"description": "remove hash code column"
						},
						{
							"name": "removeDuplicateRecords2"
						},
						{
							"name": "selectRequiredCol",
							"description": "remove unwanted col."
						},
						{
							"name": "filterNullRecords"
						},
						{
							"name": "updateNullValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Category Label} as string,",
						"          {Subcategory Label} as string,",
						"          {Product Label} as string,",
						"          {Product ID} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceCategoryDetails",
						"source(output(",
						"          {Product ID} as string,",
						"          {Department Code} as string,",
						"          {Series Code} as string,",
						"          {Series Name} as string,",
						"          {Brand Code} as string,",
						"          {Brand URL Code} as string,",
						"          {Brand Name} as string,",
						"          {Series Status} as string,",
						"          {Min Standard Days to Ship} as string,",
						"          {Max Standard Days to Ship} as string,",
						"          {Recommend Flag} as string,",
						"          {Min Standard Unit Price} as string,",
						"          {Max Standard Unit Price} as string,",
						"          {Min Price Per Piece} as string,",
						"          {Max Price Per Piece} as string,",
						"          {Volume Discount Flag} as string,",
						"          {C Value Flag} as string,",
						"          {Stock Item Flag} as string,",
						"          {Display Standard Price Flag} as string,",
						"          {Discontinued Product Flag} as string,",
						"          {Misumi Flag} as string,",
						"          {Simple Flag} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProductDetails",
						"sourceCategoryDetails aggregate(groupBy(hashCode = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> removeDuplicateRecords",
						"removeDuplicateRecords select(mapColumn(",
						"          {Category Label},",
						"          {Subcategory Label},",
						"          {Product Label},",
						"          {Product ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeHashCodeCol",
						"filterNullRecords aggregate(groupBy({Series Code}),",
						"     each(match(name!='Series Code'), $$ = first($$))) ~> removeDuplicateRecords2",
						"sourceProductDetails select(mapColumn(",
						"          {Product ID},",
						"          {Department Code},",
						"          {Series Code},",
						"          {Series Name},",
						"          {Brand Code},",
						"          {Brand URL Code},",
						"          {Brand Name},",
						"          {Series Status},",
						"          {Min Standard Days to Ship},",
						"          {Max Standard Days to Ship},",
						"          {Min Standard Unit Price},",
						"          {Max Standard Unit Price},",
						"          {Min Price Per Piece},",
						"          {Max Price Per Piece},",
						"          {Volume Discount Flag},",
						"          {Stock Item Flag},",
						"          {Misumi Flag},",
						"          {Simple Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredCol",
						"selectRequiredCol filter(not(isNull({Product ID})) || not(isNull({Series Code}))) ~> filterNullRecords",
						"removeDuplicateRecords2 window(over({Product ID}),",
						"     asc({Series Code}, true),",
						"     each(match(in(['Min Standard Days to Ship','Max Standard Days to Ship','Min Standard Unit Price','Max Standard Unit Price','Min Price Per Piece','Max Price Per Piece'],name)), $$ = iif(isNull($$),avg(toDouble($$)),toDouble($$)))) ~> updateNullValues",
						"removeHashCodeCol sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkToPrepCategoryDetails",
						"updateNullValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkToPrepProductDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_reporting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sourceProductDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sinkToReportingProductDetails"
						}
					],
					"transformations": [
						{
							"name": "getAvgs"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Series Code} as string,",
						"          {Product ID} as string,",
						"          {Department Code} as string,",
						"          {Series Name} as string,",
						"          {Brand Code} as string,",
						"          {Brand URL Code} as string,",
						"          {Brand Name} as string,",
						"          {Series Status} as string,",
						"          {Min Standard Days to Ship} as double,",
						"          {Max Standard Days to Ship} as double,",
						"          {Min Standard Unit Price} as double,",
						"          {Max Standard Unit Price} as double,",
						"          {Min Price Per Piece} as double,",
						"          {Max Price Per Piece} as double,",
						"          {Volume Discount Flag} as string,",
						"          {Stock Item Flag} as string,",
						"          {Misumi Flag} as string,",
						"          {Simple Flag} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProductDetails",
						"sourceProductDetails aggregate(groupBy({Product ID}),",
						"     each(match(in(['Min Standard Days to Ship','Max Standard Days to Ship','Min Standard Unit Price','Max Standard Unit Price','Min Price Per Piece','Max Price Per Piece'],name)), 'Avg '+$$ = avg($$))) ~> getAvgs",
						"getAvgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkToReportingProductDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_AzureSqlTable')]"
			]
		}
	]
}